s
us_geo <- st_read("cb_2015_us_state_20m.shp", as.sf = TRUE)
library(sf)
us_geo <- st_read("cb_2015_us_state_20m.shp", as.sf = TRUE)
us_geo <- st_read("cb_2015_us_state_20m.shp")
plot(us_geo)
library(usmap)
plot_usmap(regions = "states") +
labs(title = "U.S. States",
subtitle = "This is a blank map of the United States.") +
theme(panel.background=element_blank())
colnames(locations)[3:4] <- c('Lat','Lon')
locations
library(raster)
SpatialPoint(cbind(locations$Lon, locations$Lat))
pts <- SpatialPoints(cbind(locations$Lon, locations$Lat))
pts <- SpatialPoints(cbind(locations$Lon, locations$Lat), na.omit = T)
locations %>% na.exclude()
locations <- locations %>% na.exclude()
pts <- SpatialPoints(cbind(locations$Lon, locations$Lat))
pts
CRS(us_map)
points(locations, add = T)
points(pts, add = T)
points(pts)
transformed_data <- usmap_transform(pts)
transformed_data <- usmap_transform(locations)
transformed_data <- usmap_transform(cbind.data.frame(locations$Lon, locations$Lat))
plot_usmap(regions = "states") +
labs(title = "U.S. States",
subtitle = "This is a blank map of the United States.") +
geom_point(data = transformed_data,
aes(x = Lon, y = Lat),
color = "red",
size = 3)
transformed_data
plot_usmap(regions = "states") +
labs(title = "U.S. States",
subtitle = "This is a blank map of the United States.") +
geom_point(data = transformed_data,
aes(x = locations.Lon.1, y = locations.Lat.1),
color = "red",
size = 3)
locations
plot_usmap(regions = "states") +
labs(title = "Maize Genomes2F",
subtitle = "Field locations 2017") +
geom_point(data = transformed_data,
aes(x = locations.Lon.1, y = locations.Lat.1),
color = "red",
size = 3)
plot_usmap(regions = "states") +
labs(title = "Maize Genomes2Fields",
subtitle = "Field Locations 2017") +
geom_point(data = transformed_data,
aes(x = locations.Lon.1, y = locations.Lat.1),
color = "red",
size = 3)
plot_usmap(regions = "states") +
labs(title = "Maize Genomes2Fields",
subtitle = "Field locations 2017") +
geom_point(data = transformed_data,
aes(x = locations.Lon.1, y = locations.Lat.1),
color = "red",
size = 3)
plot_usmap(regions = "states") +
labs(title = "Maize Genomes2Fields",
subtitle = "Field locations in 2017") +
geom_point(data = transformed_data,
aes(x = locations.Lon.1, y = locations.Lat.1),
color = "red",
size = 3)
nrow(read.csv('~/Downloads/g2f_2017_field_metadata2.csv', header = T))
plot_usmap(regions = "states") +
labs(title = "Maize Genomes2Fields",
subtitle = "32 field locations in 2017") +
geom_point(data = transformed_data,
aes(x = locations.Lon.1, y = locations.Lat.1),
color = "red",
size = 3)
plot_usmap(regions = "states") +
labs(title = "Maize Genomes2Fields",
subtitle = "32 field locations in 2017") +
geom_point(data = transformed_data,
aes(x = locations.Lon.1, y = locations.Lat.1),
color = "red",
size = 3)
plot_usmap(regions = "states") +
labs(title = "Maize Genomes2Fields",
subtitle = "32 field locations in 2017") +
geom_point(data = transformed_data,
aes(x = locations.Lon.1, y = locations.Lat.1),
color = "red",
size = 3)
sum(c(0.0016, 0.0118, 0.0373, 0.0379, 0.5085, 0.0994, 0.1605, 0.0949, 0.0482))
exp(2.29)/(1+exp(2.29))
e(2.29)/(1+e(2.29))
exp(2.29)/(1+exp(2.29))
?exp
exp(2.29-2.16)/(1+exp(2.29-2.16))
exp(2.29-2.16=1.13)/(1+exp(2.29-2.16-1.13))
exp(2.29-2.16-1.13)/(1+exp(2.29-2.16-1.13))
exp(2.29-1.13)/(1+exp(2.29-1.13))
exp(-2.16)
exp(-0.16)
2.29 - 2.16
exp(0.13)
exp(2.29-2.16-1.13)/(1+exp(2.29-2.16-1.13))
exp(2.29-2.16)/(1+exp(2.29-2.16))
0.53 - 0.28
0.11 * 0.9
2.29 - 2.16
0.13 - 0.16
exp(0.13)/(1 - exp(0.13))
exp(-0.03)/(1 - exp(-0.03))
exp(-2.16)
exp(0.156)
exp(-2.2)
exp(-0.16)
#install and load libraries
library(tidyverse)
library(reshape2)
library(jcolors)
####load and reformat data
ken <- read.csv('Tian_project6.25.19.csv', header=T)
setwd('Documents/GitHub/StrigaWGS/Fig3/')
####load and reformat data
ken <- read.csv('Tian_project6.25.19.csv', header=T)
ken$percent <- ken$Germinated/(ken$Germinated+ken$Ungerminated)*100 #make a column for percent germination
ken <- subset(ken, Germinated+Ungerminated > 10)
ken2 <- ken %>% group_by(Sample, Site, Host, Treatment) %>% summarize(germ=mean(percent, na.rm=TRUE), num=n()) #get averages for 3 replicates of each treatment/parasite genotype combination
ken2 <- as.data.frame(ken2) #change to dataframe from tibble format
ken.pos <- subset(ken2, Site == "Kisii" | Site=="HomaBay") #subset to remove positive and negative controls before plotting
df <- dcast(ken.pos, Sample + Site + Host ~ Treatment, value.var="germ") #reformat data frame for easier plotting
colnames(df)[4] <- "DS" #ggplot didn't like column names that start with numbers
df$Site <- droplevels(df)$Site #get rid of unused levels for nicer legend
df <- subset(df, Sample != "Sther143") #only one replicate for one of the treatments
df <- subset(df, Sample != "Sther139") #less than 10 seeds in all wells for one of the treatments
summary(lm(df$DS/df$ORO ~ df$Site + df$Host)) #this is a simple ANOVA based on the difference in germination rate in response to the two different hormones. Not the best choice of approach given above but would be fine for a poster
# ken3
ken3 <- ken %>% group_by(Sample, Site, Host, Treatment)
ken3.pos <- subset(ken3, Site == "Kisii" | Site=="HomaBay") #subset to remove positive and negative controls before plotting
ken3.pos$Host <- as.factor(ken3.pos$Host)
ken3.pos$Treatment <- as.factor(ken3.pos$Treatment)
ken3.pos$Site <- as.factor(ken3.pos$Site)
# glmm with random effect of sample
library(lme4)
mod1 <- glmer(cbind(Germinated, Ungerminated) ~ Site + Host + Treatment + (1|Sample),
data = ken3.pos,
family = 'binomial')
mod2 <- glmer(cbind(Germinated, Ungerminated) ~ Site + Host  + (1|Sample),
data = ken3.pos,
family = 'binomial') # p = 0.004
mod4 <- glmer(cbind(Germinated, Ungerminated) ~ Site + Treatment  + (1|Sample),
data = ken3.pos,
family = 'binomial') # p = 0.24
####### keep treatment and site but not host
mod5 <- glmer(cbind(Germinated, Ungerminated) ~ Treatment  + (1|Sample),
data = ken3.pos,
family = 'binomial') # p = 0.05 to keep site
mod6 <- glmer(cbind(Germinated, Ungerminated) ~ Site + (1|Sample),
data = ken3.pos,
family = 'binomial') # p < 0.01 to keep treatment
summary(mod5)
anova(mod5,6)
anova(mod5,mod66)
anova(mod5,mod6)
anova(mod2,mod1)
anova(mod3,mod1)
mod3 <- glmer(cbind(Germinated, Ungerminated) ~ Treatment + Host  + (1|Sample),
data = ken3.pos,
family = 'binomial') # p = 0.011
anova(mod3,mod1)
anova(mod4,mod1)
anova(mod4)
summary(mod4)
summary(mod4)
exp(-1.2)
exp(-1.206)
exp(0.78)
exp(0.78 - 1.206)
exp(0.78)
coef(mod4)
coef(mod4)[1]
mod4[1]
mod4
exp(0.78)/(1-exp(0.78))
exp(0.78)/(1+exp(0.78))
exp(-1.206)
exp(-0.1628)
log(0.5)
log(0.9)
log(0.1)
exp(-0.16)
1/0.85
0.85/1
1/0.85214
exp(-1.206)
1/0.299
1/1.809
summary(mod4)
1/0.85
60*0.85
51/60
### load dependencies
rm(list=ls())
library(tidyverse)
library(sf)
library(tmap)
library(tmaptools)
library(jcolors)
#library(spData)
#library(grid)
data(World)
setwd('/Users/emilybellis/Documents/GitHub/StrigaWGS/Fig1')
setwd('/Users/emilybellis/Documents/GitHub/StrigaWGS/Fig1/')
getwd()
setwd('../Fig1/')
### data points from sampling
modern <- read.csv("Striga_GPS_sequenced.csv", header=T)
modern <- modern %>% dplyr::select(Lat, Lon, Site, Host) %>% unique()
modern$Site <- as.factor(str_replace(modern$Site, "2","") %>% str_trim())
modern$Type <- "modern"
### subset to just the 68 that were sequenced
modern_df <- SpatialPointsDataFrame(cbind.data.frame(modern$Lon, modern$Lat),modern,proj4string = CRS("+proj=longlat"))
mod_bb <- st_bbox(modern_df)
mod_bb <- mod_bb + c(-0.3,-0.3,0.3,0.3)
sg <- bb_poly(mod_bb + c(-1,-1,1,1))
asp <- (mod_bb$ymax - mod_bb$ymin)/(mod_bb$xmax - mod_bb$xmin)
head(modern_df)
filter(modern_df, unique(Site))
filter(modern_df, Host == "maize"))
filter(modern_df, Host == "maize")
### data points from sampling
modern <- read.csv("Striga_GPS_sequenced.csv", header=T)
modern <- modern %>% dplyr::select(Lat, Lon, Site, Host) %>% unique() %>% filter(Host == "maize")
modern$Site <- as.factor(str_replace(modern$Site, "2","") %>% str_trim())
modern$Type <- "modern"
### subset to just the 68 that were sequenced
modern_df <- SpatialPointsDataFrame(cbind.data.frame(modern$Lon, modern$Lat),modern,proj4string = CRS("+proj=longlat"))
mod_bb <- st_bbox(modern_df)
mod_bb <- mod_bb + c(-0.3,-0.3,0.3,0.3)
sg <- bb_poly(mod_bb + c(-1,-1,1,1))
asp <- (mod_bb$ymax - mod_bb$ymin)/(mod_bb$xmax - mod_bb$xmin)
### base map of Kenya
kenya<-getData("GADM", country="KE", level=1)
kenya_sf <- as(kenya, Class="sf")
kenya_smooth <- simplify_shape(kenya_sf, 0.01)
### base map of Kenya
kenya<-getData("GADM", country="KE", level=1)
kenya_sf <- as(kenya, Class="sf")
### subset to just the 68 that were sequenced
modern_df <- SpatialPointsDataFrame(cbind.data.frame(modern$Lon, modern$Lat),modern,proj4string = CRS("+proj=longlat"))
mod_bb <- st_bbox(modern_df)
mod_bb <- mod_bb + c(-0.3,-0.3,0.3,0.3)
sg <- bb_poly(mod_bb + c(-1,-1,1,1))
asp <- (mod_bb$ymax - mod_bb$ymin)/(mod_bb$xmax - mod_bb$xmin)
### base map of Kenya
kenya<-getData("GADM", country="KE", level=1)
?getData
### base map of Kenya
kenya<-raster::getData("GADM", country="KE", level=1)
kenya_sf <- as(kenya, Class="sf")
kenya_smooth <- simplify_shape(kenya_sf, 0.01)
### want this to just be points for the sampled locations; distinguish only herbarium & modern, color points same as PCoA
mainmap <- tm_shape(kenya_smooth, bbox=mod_bb) +
tm_polygons() +
tm_shape(modern_df) +
tm_symbols(size=0.7, col="Site", alpha=0.7, jitter=0.1, palette=jcolors(palette="pal5"), shape="Host", legend.col.show = F) +
tm_text("Site", remove.overlap = T, xmod = 1.5, ymod = 1, size = 0.75) +
tm_scale_bar(position = c("left","bottom")) +
tm_layout(legend.outside = T)
### create inset highlighting Kenya in Africa
afr <- World$geometry[World$continent == "Africa"]
afr_ll <- st_transform(afr, "+proj=longlat +datum=WGS84")
xy <- st_bbox(afr_ll)
asp2 <- (xy$xmax - xy$xmin)/(xy$ymax - xy$ymin)
africa_inset <- tm_shape(afr_ll) +
tm_borders() +
tm_fill() +
tm_shape(sg) +
tm_borders(lw=1, col="red") #+
w <- 0.45
h <- asp2 * w
vp <- viewport(x=0.97, y=0.45, width = w, height=h, just=c("right", "top"))
tmap_save(mainmap,filename="sampling.png",
dpi=300, insets_tm=africa_inset, insets_vp=vp,
height=asp*91, width=91, units="mm")
mainmap
### data points from sampling
modern <- read.csv("Striga_GPS_sequenced.csv", header=T)
modern <- modern %>% dplyr::select(Lat, Lon, Site, Host) %>% unique() %>% filter(Host == "maize") %>% filter(Site != "Mumias2")
modern$Site <- as.factor(str_replace(modern$Site, "2","") %>% str_trim())
modern$Type <- "modern"
modern
### subset to just the 68 that were sequenced
modern_df <- SpatialPointsDataFrame(cbind.data.frame(modern$Lon, modern$Lat),modern,proj4string = CRS("+proj=longlat"))
mod_bb <- st_bbox(modern_df)
mod_bb <- mod_bb + c(-0.3,-0.3,0.3,0.3)
sg <- bb_poly(mod_bb + c(-1,-1,1,1))
asp <- (mod_bb$ymax - mod_bb$ymin)/(mod_bb$xmax - mod_bb$xmin)
### base map of Kenya
kenya<-raster::getData("GADM", country="KE", level=1)
kenya_sf <- as(kenya, Class="sf")
kenya_smooth <- simplify_shape(kenya_sf, 0.01)
### want this to just be points for the sampled locations; distinguish only herbarium & modern, color points same as PCoA
mainmap <- tm_shape(kenya_smooth, bbox=mod_bb) +
tm_polygons() +
tm_shape(modern_df) +
tm_symbols(size=0.7, col="Site", alpha=0.7, jitter=0.1, palette=jcolors(palette="pal5"), legend.col.show = F) +
tm_text("Site", remove.overlap = T, xmod = 1.5, ymod = 1, size = 0.75) +
tm_scale_bar(position = c("left","bottom")) +
tm_layout(legend.outside = T)
### create inset highlighting Kenya in Africa
afr <- World$geometry[World$continent == "Africa"]
afr_ll <- st_transform(afr, "+proj=longlat +datum=WGS84")
xy <- st_bbox(afr_ll)
asp2 <- (xy$xmax - xy$xmin)/(xy$ymax - xy$ymin)
africa_inset <- tm_shape(afr_ll) +
tm_borders() +
tm_fill() +
tm_shape(sg) +
tm_borders(lw=1, col="red") #+
w <- 0.45
h <- asp2 * w
vp <- viewport(x=0.97, y=0.45, width = w, height=h, just=c("right", "top"))
tmap_save(mainmap,filename="sampling.png",
dpi=300, insets_tm=africa_inset, insets_vp=vp,
height=asp*91, width=91, units="mm")
tmap_save(mainmap,filename="sampling.pdf",
dpi=300, insets_tm=africa_inset, insets_vp=vp,
height=asp*91, width=91, units="mm")
africa_inset <- tm_shape(afr_ll) +
tm_borders() +
tm_fill() +
tm_shape(sg) +
tm_borders(lw=1, col="red") #+
africa_inset
africa_inset <- tm_shape(afr_ll) +
tm_borders() +
tm_fill() +
tm_shape(sg) +
tm_borders(lw=2, col="red") #+
africa_inset
w <- 0.45
h <- asp2 * w
vp <- viewport(x=0.97, y=0.45, width = w, height=h, just=c("right", "top"))
?viewport
#library(spData)
library(grid)
vp <- viewport(x=0.97, y=0.45, width = w, height=h, just=c("right", "top"))
tmap_save(mainmap,filename="sampling.pdf",
dpi=300, insets_tm=africa_inset, insets_vp=vp,
height=asp*91, width=91, units="mm")
library(tidyverse)
library(jcolors)
# function to get diff in allele frequency
getAF <- function(pop1, pop2) {
df_k <- inner_join(pop1, pop2, by = c("chromo", "position"))
df_k$AF <- NULL
for (i in 1:nrow(df_k)) {
if (df_k$major.x[i] == df_k$major.y[i]){
df_k$AF[i] <- max(df_k$knownEM.x[i],df_k$knownEM.y[i]) - min(df_k$knownEM.x[i],df_k$knownEM.y[i])
} else {
df_k$AF[i] <- 1 - max(df_k$knownEM.x[i],df_k$knownEM.y[i]) - min(df_k$knownEM.x[i],df_k$knownEM.y[i])
}
}
return(df_k %>% select(c(chromo, position, AF)))
}
# read in files
km <- read.table('ang.kisii_mz.out.mafs', header = T) %>%
filter(nInd >= 9)
setwd('~/Documents/GitHub/StrigaWGS/Fig3_ANGSD/')
# read in files
km <- read.table('ang.kisii_mz.out.mafs', header = T) %>%
filter(nInd >= 9)
kf <- read.table('ang.kisii_fm.out.mafs', header = T) %>%
filter(nInd >= 9)
hm <- read.table('ang.homa_mz.out.mafs', header = T) %>%
filter(nInd >= 9)
hs <- read.table('ang.homa_sg.out.mafs', header = T) %>%
filter(nInd >= 9)
df_h <- getAF(hs, hm)
df_h$pop <- 'Homa Bay'
df_k <- getAF(kf, km)
df_k$pop <- 'Kisii'
df <- rbind.data.frame(df_k, df_h)
sl <- subset(df, chromo != "StHeBC4_h_c11261_g0_i1" &
chromo != "StHeBC4_p_c12587_g2_i1" &
chromo != "StHeBC4_u_c12903_g27039_i4")
pm <- subset(df, chromo == "StHeBC4_u_c12903_g27039_i4")
# change labels for chromo for ShHTLs to annotations
shtl_names <- c(
"KR013131.1" = "ShHTL11",
"KR013130.1" = "ShHTL10",
"KR013129.1" = "ShHTL9",
"KR013128.1" = "ShHTL8",
"KR013127.1" = "ShHTL7",
"KR013126.1" = "ShHTL6",
"KR013125.1" = "ShHTL5",
"KR013124.1" = "ShHTL4",
"KR013123.1" = "ShHTL3",
"KR013122.1" = "ShHTL2",
"KR013121.1" = "ShHTL1"
)
p <- ggplot(sl, aes(x = position, y = AF, col = pop)) +
geom_point(size = 0.1, alpha = 0.5) +
facet_grid(chromo~., labeller = labeller(chromo = shtl_names)) +
ylim(c(0,1)) +
theme_minimal() +
theme(panel.grid.minor = element_blank(),
panel.grid.major.x = element_blank()) +
scale_colour_discrete(name = "Population") +
ylab("Allele Frequency Difference")
p2 <-  ggplot(pm, aes(x = position, y = AF, col = pop)) +
geom_point(size = 0.1, alpha = 0.5) +
theme_minimal() +
theme(panel.grid.minor = element_blank(),
panel.grid.major.x = element_blank()) +
scale_colour_discrete(name = "Population") +
ylab("Allele Frequency\nDifference")
p
p2 <-  ggplot(pm, aes(x = position, y = AF, col = pop)) +
geom_point(size = 0.1, alpha = 0.5) +
theme_minimal() +
theme(panel.grid.minor = element_blank(),
panel.grid.major.x = element_blank()) +
scale_colour_discrete(name = "Population") +
ylab("Allele Frequency\nDifference")
p2
# haustorium loci of interest
# for this one, not taking the difference (many sites not present in one pop)
hm$host <- "maize"
hs$host <- "sorghum"
km$host <- "maize"
kf$host <- "finger millet"
hm$pop <- "Homa Bay"
hs$pop <- "Homa Bay"
km$pop <- "Kisii"
kf$pop <- "Kisii"
df <- rbind.data.frame(hm, hs, km, kf)
p <- ggplot(haus_1, aes(x = position, y = knownEM, col = host)) +
geom_point(alpha = 0.4, size = 0.2) +
#facet_grid(chromo~pop, labeller = labeller(chromo = haus_names)) +
scale_color_manual(name = "Host", values = paste0(jcolors(palette="pal5")[c(1,3,2)])) +
theme_minimal() +
theme(panel.grid.minor = element_blank(),
panel.grid.major.x = element_blank(),
strip.text.y = element_text(size = 7),
legend.position = 'bottom',
axis.text.x = element_text(angle = 90, hjust = 1.25)) +
ylab("Minor Allele Frequency")
haus_1 <- subset(df, chromo == "StHeBC4_h_c11261_g0_i1")
haus_2 <- subset(df, chromo == "StHeBC4_p_c12587_g2_i1")
p <- ggplot(haus_1, aes(x = position, y = knownEM, col = host)) +
geom_point(alpha = 0.4, size = 0.2) +
#facet_grid(chromo~pop, labeller = labeller(chromo = haus_names)) +
scale_color_manual(name = "Host", values = paste0(jcolors(palette="pal5")[c(1,3,2)])) +
theme_minimal() +
theme(panel.grid.minor = element_blank(),
panel.grid.major.x = element_blank(),
strip.text.y = element_text(size = 7),
legend.position = 'bottom',
axis.text.x = element_text(angle = 90, hjust = 1.25)) +
ylab("Minor Allele Frequency")
p
p <- ggplot(haus_1, aes(x = position, y = knownEM, col = host)) +
geom_point(alpha = 0.4, size = 0.2) +
facet_grid(.~pop) + #, labeller = labeller(chromo = haus_names)) +
scale_color_manual(name = "Host", values = paste0(jcolors(palette="pal5")[c(1,3,2)])) +
theme_minimal() +
theme(panel.grid.minor = element_blank(),
panel.grid.major.x = element_blank(),
strip.text.y = element_text(size = 7),
legend.position = 'bottom',
axis.text.x = element_text(angle = 90, hjust = 1.25)) +
ylab("Minor Allele Frequency")
p
pdf("Fig5_chemo.pdf", width = 3, height = 1.5)
p
dev.off()
pdf("Fig5_chemo.pdf", width = 3, height = 2)
p
dev.off()
p <- ggplot(haus_1, aes(x = position, y = knownEM, col = host)) +
geom_point(alpha = 0.4, size = 0.25) +
facet_grid(.~pop) + #, labeller = labeller(chromo = haus_names)) +
scale_color_manual(name = "Host", values = paste0(jcolors(palette="pal5")[c(1,3,2)])) +
theme_minimal() +
theme(panel.grid.minor = element_blank(),
panel.grid.major.x = element_blank(),
strip.text.y = element_text(size = 7),
legend.position = 'bottom',
axis.text.x = element_text(angle = 90, hjust = 1.25)) +
ylab("Minor Allele Frequency")
pdf("Fig5_chemo.pdf", width = 3, height = 2)
p
dev.off()
p <- ggplot(haus_2, aes(x = position, y = knownEM, col = host)) +
geom_point(alpha = 0.4, size = 0.25) +
facet_grid(.~pop) + #, labeller = labeller(chromo = haus_names)) +
scale_color_manual(name = "Host", values = paste0(jcolors(palette="pal5")[c(1,3,2)])) +
theme_minimal() +
theme(panel.grid.minor = element_blank(),
panel.grid.major.x = element_blank(),
strip.text.y = element_text(size = 7),
legend.position = 'bottom',
axis.text.x = element_text(angle = 90, hjust = 1.25)) +
ylab("Minor Allele Frequency")
pdf("Fig5_sgt.pdf", width = 3, height = 2)
p
dev.off()
