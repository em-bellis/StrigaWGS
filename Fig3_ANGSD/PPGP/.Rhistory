}
k31_df
ggplot(k31_df, aes(x = km, y = dist, col = Same_host)) +
geom_point()
ggplot(k31_df, aes(x = km, y = dist, col = Same_host)) +
geom_point(alpha = 0.5)
str(k31_df)
k31_df$km <- as.numeric(k31_df$km)
ggplot(k31_df, aes(x = km, y = dist, col = Same_host)) +
geom_point(alpha = 0.5)
subset(k31_df, dist < 0.015)
ggplot(k31_df, aes(x = km, y = dist, col = Same_host)) +
geom_point(alpha = 0.5) +
ylim(c(0.015, 0.030)) # these are the self comparisons
lm(dist ~ km + Same_host, data = k31_df)
mod1 <- lm(dist ~ km + Same_host, data = k31_df)
mod2 <- lm(dist ~ km, data = k31_df)
anova(mod1, mod2)
summary(mod1)
summary(mod1)
summary(mod2)
subset(k31_df, dist == 0)
subset(k31_df, dist = 0)
subset(k31_df, km == 0)
subset(k31_df, km == 0 & S1 != S2)
mean(subset(k31_df, km == 0 & S1 != S2))
average(subset(k31_df, km == 0 & S1 != S2)$dist)
mean(subset(k31_df, km == 0 & S1 != S2)$dist)
avg <- mean(subset(k31_df, km == 0 & S1 != S2)$dist)
qt(0.975,df=length(w1$vals)-1)*sd(w1$vals)/sqrt(length(w1$vals))
?qt
same_pop <- subset(k31_df, km == 0 & S1 != S2)
same_pop <- subset(k31_df, km == 0 & S1 != S2)
avg <- mean(same_pop$dist)
err <- qt(0.975,df=length(same_pop$dist)-1)*sd(same_pop$dist)/sqrt(length(same_pop$dist))
?qt
err
avg
avg - err
avg + err
same_pop <- subset(k31_df, km >= 50 & S1 != S2)
avg <- mean(same_pop$dist)
err <- qt(0.975,df=length(same_pop$dist)-1)*sd(same_pop$dist)/sqrt(length(same_pop$dist))
avg
avg - err
avg + err
same_pop <- subset(k31_df, km == 0 & S1 != S2)
diff_pop <- subset(k31_df, km >= 50 & S1 != S2)
quantile(same_pop)
quantile(same_pop$dist)
quantile(diff_pop$dist)
ggplot(k31_df, aes(x = km, y = dist, col = Same_host)) +
geom_point(alpha = 0.5) +
ylim(c(0.015, 0.030)) # these are the self comparisons
ggplot(k31_df, aes(x = km, y = dist, col = Same_host)) +
geom_boxplot(alpha = 0.5) +
ylim(c(0.015, 0.030)) # these are the self comparisons
ggplot(k31_df, aes(x = km, y = dist)) +
geom_boxplot(alpha = 0.5) +
ylim(c(0.015, 0.030)) # these are the self comparisons
ggplot(k31_df, aes(x = km, y = dist, group = km)) +
geom_boxplot(alpha = 0.5) +
ylim(c(0.015, 0.030)) # these are the self comparisons
ggplot(k31_df, aes(x = km, y = dist, id = km)) +
geom_boxplot(alpha = 0.5) +
ylim(c(0.015, 0.030)) # these are the self comparisons
k31_df$bins <- k31_df %>%
mutate(bin=cut_width(km, width=10, boundary=0))
ggplot(k31_df, aes(x = bins, y = dist, id = km)) +
geom_boxplot(alpha = 0.5) +
ylim(c(0.015, 0.030)) # these are the self comparisons
k31_df
k31_df$Same_host <- 'N'
k31_df$km <- 'N'
modern <- read.csv("../Fig1/Striga_GPS.csv", header=T)
for (i in 1:nrow(k31_df)) {
if (modern[modern$SampleID == k31_df$S1[i],3] ==
modern[modern$SampleID == k31_df$S2[i],3]) {
k31_df$Same_host[i] <- 'Y'
}
k31_df$km[i] <- geomat_mat[k31_df$S1[i],k31_df$S2[i]]
}
k31_df$km <- as.numeric(k31_df$km)
k31_df <- k31_df %>%
mutate(bins=cut_width(km, width=10, boundary=0))
ggplot(k31_df, aes(x = bins, y = dist, id = km)) +
geom_boxplot(alpha = 0.5) +
ylim(c(0.015, 0.030)) # these are the self comparisons
mod1 <- lm(dist ~ km, data = k31_df)
ggplot(k31_df, aes(x = bins, y = dist, id = km)) +
geom_violin(alpha = 0.5) +
ylim(c(0.015, 0.030)) # these are the self comparisons
ggplot(k31_df, aes(x = bins, y = dist, id = km)) +
geom_boxplot(alpha = 0.5) +
ylim(c(0.015, 0.030)) # these are the self comparisons
same_pop <- subset(k31_df, km == 0 & S1 != S2)
diff_pop <- subset(k31_df, km >= 50 & S1 != S2)
quantile(same_pop$dist)
quantile(diff_pop$dist)
range(diff_pop$dist)
range(same_pop$dist)
ggplot(k31_df, aes(x = km, y = dist, id = km)) +
geom_boxplot(alpha = 0.5) +
ylim(c(0.015, 0.030)) # these are the self comparisons
ggplot(k31_df, aes(x = km, y = dist, id = km)) +
geom_point() +
ylim(c(0.015, 0.030)) # these are the self comparisons
ggplot(k31_df, aes(x = km, y = dist, id = km)) +
geom_point(alpha = 0.5) +
ylim(c(0.015, 0.030)) # these are the self comparisons
ggplot(k31_df, aes(x = km, y = dist, id = km)) +
geom_point(alpha = 0.25) +
ylim(c(0.015, 0.030)) # these are the self comparisons
ggplot(k31_df, aes(x = km, y = dist, id = km)) +
geom_point(alpha = 0.25) +
ylim(c(0.02, 0.030)) +
geom_abline(lm(dist ~ km)) +
theme_minimal# these are the self comparisons
k31_df
ggplot(k31_df, aes(x = km, y = dist, id = km)) +
geom_point(alpha = 0.25) +
ylim(c(0.02, 0.030)) +
geom_abline(lm(dist ~ km), k31_df) +
theme_minimal# these are the self comparisons
ggplot(k31_df, aes(x = km, y = dist)) +
geom_point(alpha = 0.25) +
ylim(c(0.02, 0.030)) +
geom_abline(lm(dist ~ km), k31_df) +
theme_minimal# these are the self comparisons
ggplot(k31_df, aes(x = km, y = dist)) +
geom_point(alpha = 0.25) +
ylim(c(0.02, 0.030)) +
geom_abline(lm(dist ~ km)) +
theme_minimal# these are the self comparisons
ggplot(k31_df, aes(x = km, y = dist)) +
geom_point(alpha = 0.25) +
ylim(c(0.02, 0.030))
ggplot(k31_df, aes(x = km, y = dist)) +
geom_point(alpha = 0.25) +
ylim(c(0.02, 0.030)) +
geom_smooth(method='lm', formula = dist ~ km) +
theme_minimal# these are the self comparisons
ggplot(k31_df, aes(x = km, y = dist)) +
geom_point(alpha = 0.25) +
ylim(c(0.02, 0.030)) +
geom_smooth(method='lm', formula = dist ~ km) +
theme_minimal() # these are the self comparisons
ggplot(k31_df, aes(x = km, y = dist)) +
geom_point(alpha = 0.25) +
ylim(c(0.02, 0.030)) +
geom_smooth(method='lm', formula = dist ~ km) +
theme_classic() # these are the self comparisons
ggplot(k31_df, aes(x = km, y = dist)) +
geom_point(alpha = 0.25) +
ylim(c(0.02, 0.030)) +
geom_smooth(method='lm', formula = dist ~ km) #+
ggplot(k31_df, aes(x = km, y = dist)) +
geom_point(alpha = 0.25) +
ylim(c(0.02, 0.030)) +
geom_smooth(method='lm', formula = dist ~ km) +
theme_classic() # these are the self comparisons
?geom_smooth
ggplot(k31_df, aes(x = km, y = dist)) +
geom_point(alpha = 0.25) +
ylim(c(0.02, 0.030)) +
geom_smooth(method='lm') +
theme_classic() # these are the self comparisons
?geom_smooth
p <- ggplot(k31_df, aes(x = km, y = dist)) +
geom_point(alpha = 0.25) +
ylim(c(0.02, 0.030)) +
geom_smooth(method='lm') +
theme_classic() # these are the self comparisons
p
p <- ggplot(k31_df, aes(x = km, y = dist)) +
geom_point(alpha = 0.25) +
ylim(c(0.02, 0.030)) +
geom_smooth(method='lm', se =T) +
theme_classic() # these are the self comparisons
p
p <- ggplot(k31_df, aes(x = km, y = dist)) +
geom_point(alpha = 0.25) +
ylim(c(0.02, 0.030)) +
geom_smooth(method='lm', se = F) +
theme_classic() # these are the self comparisons
p
p <- ggplot(k31_df, aes(x = km, y = dist)) +
geom_point(alpha = 0.25) +
ylim(c(0.02, 0.030)) +
geom_smooth(method='lm', se = F) +
theme_classic() +
xlab("Geographic distance (km)") +
ylab("k-mer distance") # these are the self comparisons
p
diff_pop <- subset(k31_df, km >= 100 & S1 != S2)
quantile(same_pop$dist)
quantile(diff_pop$dist)
range(diff_pop$dist)
range(same_pop$dist)
diff_pop <- subset(k31_df, km >= 100 & S1 != S2)
range(same_pop$dist)
range(diff_pop$dist)
length(same_pop)
nrow(same_pop)
nrow(diff_pop)
### read in transcriptome summary files from PPGP
### downloaded from http://bigdata.bx.psu.edu/PPGP_II_data/StHeBC4/PPGPII/
library(tidyverse)
library(viridis)
### function to average replicates for a particular stage
averageTPM <- function(stage_idx) {
# load data for each of the three replicates
R1 <- read.table(paste0('StHe_',stages[stage_idx],'_R1.genes.results'), header = T)
R2 <- read.table(paste0('StHe_',stages[stage_idx],'_R2.genes.results'), header = T)
R3 <- read.table(paste0('StHe_',stages[stage_idx],'_R3.genes.results'), header = T)
# calculate avg TPM for stage
df <- cbind.data.frame(R1$gene_id, R1$transcript_id.s., R1$TPM, R2$TPM, R3$TPM)
df$avg <- 'NA'
for (i in 1:nrow(df)) {
df$avg[i] <- round(mean(c(df$`R1$TPM`[i],df$`R2$TPM`[i],df$`R3$TPM`[i])),2)
}
return(df$avg)
}
### create new df with average TPM for each stage
stages <- c('0','1','2','3','4','5','6_1','6_2')
R1 <- read.table(paste0('StHe_',stages[1],'_R1.genes.results'), header = T)
df <- select(R1, c(gene_id, transcript_id.s.))
### create new df with average TPM for each stage
stages <- c('0','1','2','3','4','5','6_1','6_2')
getwd()
setwd('../PPGP/')
### create new df with average TPM for each stage
stages <- c('0','1','2','3','4','5','6_1','6_2')
R1 <- read.table(paste0('StHe_',stages[1],'_R1.genes.results'), header = T)
df <- select(R1, c(gene_id, transcript_id.s.))
### create new df with average TPM for each stage
stages <- c('0','1','2','3','4','5','6_1','6_2')
### read in transcriptome summary files from PPGP
### downloaded from http://bigdata.bx.psu.edu/PPGP_II_data/StHeBC4/PPGPII/
library(tidyverse)
library(viridis)
### function to average replicates for a particular stage
averageTPM <- function(stage_idx) {
# load data for each of the three replicates
R1 <- read.table(paste0('StHe_',stages[stage_idx],'_R1.genes.results'), header = T)
R2 <- read.table(paste0('StHe_',stages[stage_idx],'_R2.genes.results'), header = T)
R3 <- read.table(paste0('StHe_',stages[stage_idx],'_R3.genes.results'), header = T)
# calculate avg TPM for stage
df <- cbind.data.frame(R1$gene_id, R1$transcript_id.s., R1$TPM, R2$TPM, R3$TPM)
df$avg <- 'NA'
for (i in 1:nrow(df)) {
df$avg[i] <- round(mean(c(df$`R1$TPM`[i],df$`R2$TPM`[i],df$`R3$TPM`[i])),2)
}
return(df$avg)
}
### create new df with average TPM for each stage
stages <- c('0','1','2','3','4','5','6_1','6_2')
R1 <- read.table(paste0('StHe_',stages[1],'_R1.genes.results'), header = T)
df <- select(R1, c(gene_id, transcript_id.s.))
head(R1)
df <- dplyr::select(R1, c(gene_id, transcript_id.s.))
for (i in 1:length(stages)) {
df$new <- as.numeric(averageTPM(i))
colnames(df)[i + 2] <- paste0('Stage_',stages[i])
}
### add column to color by whether is host-associated or not
ha <- read.table('PPGP_hits.list')
df$type <- 'NA'
for (i in 1:nrow(df)) {
transcripts <- strsplit(df$transcript_id.s.[i], ",")[[1]] # some have multiple listed
for (j in 1:length(transcripts)) {
if (transcripts[j] %in% ha$V1) {
df$type[i] <- 'Host-associated'
}
}
}
p
p <- ggplot(k31_df, aes(x = km, y = dist)) +
geom_point(alpha = 0.25) +
ylim(c(0.02, 0.030)) +
geom_smooth(method='lm', se = F, lty = 2) +
theme_classic() +
xlab("Geographic distance (km)") +
ylab("k-mer distance") # these are the self comparisons
p
p <- ggplot(k31_df, aes(x = km, y = dist)) +
geom_point(alpha = 0.25) +
ylim(c(0.02, 0.030)) +
geom_smooth(method='lm', se = T, lty = 2) +
theme_classic() +
xlab("Geographic distance (km)") +
ylab("k-mer distance") # these are the self comparisons
p
p <- ggplot(k31_df, aes(x = km, y = dist)) +
geom_point(alpha = 0.25) +
ylim(c(0.02, 0.030)) +
geom_smooth(method='lm', se = F, lty = 2) +
theme_classic() +
xlab("Geographic distance (km)") +
ylab("k-mer distance") # these are the self comparisons
p
p <- ggplot(k31_df, aes(x = km, y = dist)) +
geom_point(alpha = 0.25) +
ylim(c(0.02, 0.030)) +
geom_smooth(method='lm', se = F, lty = 2) +
theme_classic() +
xlab("Geographic distance (km)") +
ylab("paste0(italic(k),-mer distance") # these are the self comparisons
p
p <- ggplot(k31_df, aes(x = km, y = dist)) +
geom_point(alpha = 0.25) +
ylim(c(0.02, 0.030)) +
geom_smooth(method='lm', se = F, lty = 2) +
theme_classic() +
xlab("Geographic distance (km)") +
ylab(paste0(italic(k),"-mer distance")) # these are the self comparisons
p <- ggplot(k31_df, aes(x = km, y = dist)) +
geom_point(alpha = 0.25) +
ylim(c(0.02, 0.030)) +
geom_smooth(method='lm', se = F, lty = 2) +
theme_classic() +
xlab("Geographic distance (km)") +
ylab(paste0(expression(italic(k),"-mer distance"))) # these are the self comparisons
p
p <- ggplot(k31_df, aes(x = km, y = dist)) +
geom_point(alpha = 0.25) +
ylim(c(0.02, 0.030)) +
geom_smooth(method='lm', se = F, lty = 2) +
theme_classic() +
xlab("Geographic distance (km)") +
ylab("k-mer distance"))) # these are the self comparisons
p <- ggplot(k31_df, aes(x = km, y = dist)) +
geom_point(alpha = 0.25) +
ylim(c(0.02, 0.030)) +
geom_smooth(method='lm', se = F, lty = 2) +
theme_classic() +
xlab("Geographic distance (km)") +
ylab("31-mer genetic distance"))) # these are the self comparisons
p <- ggplot(k31_df, aes(x = km, y = dist)) +
geom_point(alpha = 0.25) +
ylim(c(0.02, 0.030)) +
geom_smooth(method='lm', se = F, lty = 2) +
theme_classic() +
xlab("Geographic distance (km)") +
ylab("31-mer genetic distance") # these are the self comparisons
p
p <- ggplot(k31_df, aes(x = km, y = dist)) +
geom_point(alpha = 0.25) +
ylim(c(0.02, 0.030)) +
geom_smooth(method='lm', se = F, lty = 2) +
theme_classic() +
xlab("Geographic distance (km)") +
ylab("Genetic distance") # these are the self comparisons
p
pdf("geo_v_gen.pdf", width = 3, height = 1.5)
p
dev.off()
pdf("geo_v_gen.pdf", width = 3, height = 1.75)
p
dev.off()
p <- ggplot(k31_df, aes(x = km, y = dist)) +
geom_point(alpha = 0.1) +
ylim(c(0.02, 0.030)) +
geom_smooth(method='lm', se = F, lty = 2) +
theme_classic() +
xlab("Geographic distance (km)") +
ylab("Genetic distance") # these are the self comparisons
pdf("geo_v_gen.pdf", width = 3, height = 1.75)
p
dev.off()
mod1 <- lm(dist ~ km, data = k31_df)
summary(mod1)
nrow(subset(k31_df, S1 != S2))
tail(k31_df)
df
head(df)
ha <- read.table('PPGP_hits.list')
df$type <- 'NA'
for (i in 1:nrow(df)) {
transcripts <- strsplit(df$transcript_id.s.[i], ",")[[1]] # some have multiple listed
for (j in 1:length(transcripts)) {
if (transcripts[j] %in% ha$V1) {
df$type[i] <- 'Host-associated'
}
}
}
head(df)
subset(df, type != 'NA')
write.table(df, file = "PPGPII_avgTPM.txt", sep = "\t", row.names = F)
head(df)
write.table(df, file = "PPGPII_avgTPM.txt", sep = "\t", row.names = F, quotes = F)
write.table(df, file = "PPGPII_avgTPM.txt", sep = "\t", row.names = F, quote = F)
write.table(df, file = "PPGPII_avgTPM.txt", sep = "\t", row.names = F, quote = F)
head(Df)
head(df)
subset(df, type != "NA")
df_ha <- subset(df, type != "NA")
nrow(df_ha)
df_ha
# just host-associated
df_ha <- subset(df, type != "NA") %>%
pivot_longer(cols = 3:10)
df_ha$transcript_id.s. <- as.factor(df_ha$transcript_id.s.)
df_ha$type <- as.factor(df_ha$type)
head(df_ha)
ggplot(df_ha, aes(x = name, y = log2(value))) + geom_line()
ggplot(df_ha, aes(x = name, y = log2(value), id = gene_id)) +
geom_line()
df_ha$name <- as.factor(df_ha$name)
df_ha$gene_id <- as.factor(df_ha$gene_id)
df_ha$transcript_id.s. <- as.factor(df_ha$transcript_id.s.)
df_ha$type <- as.factor(df_ha$type)
ggplot(df_ha, aes(x = name, y = log2(value), id = gene_id)) +
geom_line()
head(df_ha)
df_ha[1,]
ggplot(df_ha, aes(x = name, y = log2(value), group = gene_id)) +
geom_line()
head(df)
df_ha <- subset(df, type != "NA")
write.table(df_ha, file = "PPGPII_ha_avgTPM.txt", sep = "\t", row.names = F, quote = F)
install.packages('mclust')
library(mclust)
?mclust
vignette(mclust)
vignette('mclust')
ggplot(df_ha, aes(x = name, y = log2(value), group = gene_id)) +
geom_line()
# just host-associated
df_ha <- subset(df, type != "NA") %>%
pivot_longer(cols = 3:10)
df_ha$name <- as.factor(df_ha$name)
df_ha$gene_id <- as.factor(df_ha$gene_id)
df_ha$transcript_id.s. <- as.factor(df_ha$transcript_id.s.)
df_ha$type <- as.factor(df_ha$type)
ggplot(df_ha, aes(x = name, y = log2(value), group = gene_id)) +
geom_line()
head(df)
df %>% filter(type != "NA")
df %>% filter(type != "NA") %>% filter(Stage_3 > c(Stage_0:Stage_2, Stage_4:Stage_6_2))
df %>% filter(type != "NA") %>% filter(Stage_3 > Stage_0:Stage_2))
df %>% filter(type != "NA") %>% filter(Stage_3 > Stage_0:Stage_2)
ggplot(df_ha, aes(x = name, y = log2(value), group = gene_id, col = gene_id)) +
geom_line() +
theme(legend.position = NULL)
ggplot(df_ha, aes(x = name, y = log2(value), group = gene_id, col = gene_id)) +
geom_line() +
theme(legend.position = "none")
ggplot(df_ha, aes(x = name, y = log2(value), group = name)) +
geom_boxplot() +
theme(legend.position = "none")
ggplot(df_ha, aes(x = name, y = (value), group = name)) +
geom_boxplot() +
theme(legend.position = "none")
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
# Chunk 2
library(adegenet)
library(tidyverse)
k31 <- read.table("k31.mash.out", header=F)
k31 <- k31 %>% dplyr::select(1:3)
colnames(k31) <- c("S1","S2","dist")
k31$S1 <- as.factor(k31$S1)
k31$S2 <- as.factor(k31$S2)
k31_df <- k31
k31 <- as.matrix(k31 %>%
pivot_wider(names_from = S2,
values_from = dist) %>%
column_to_rownames(var="S1"))
k31.dist <- as.dist(k31)
# Chunk 3
library(geodist)
modern <- read.csv("../Fig1/Striga_GPS.csv", header=T)
modern <- modern %>% dplyr::select(SampleID, Lat, Lon)
modern <- modern %>% filter(SampleID %in% unique(rownames(k31)))
geomat <- geodist(modern, sequential = F, measure = "geodesic")/1000
rownames(geomat) <- modern$SampleID
colnames(geomat) <- modern$SampleID
geomat_mat <- geomat
geomat <- as.dist(geomat)
# Chunk 4
ibd <- mantel.randtest(k31.dist,geomat)
plot(ibd) # significant IBD, p=0.003
# Chunk 5
library(MASS)
dens <- kde2d(geomat,k31.dist, n=300)
myPal <- colorRampPalette(c("white","blue","gold", "orange", "red"))
pdf("Fig1D_IBD.pdf", width = 3, height=3)
plot(geomat,k31.dist, pch=20,cex=.5, xlab="Distance (km)", alpha = 0.5, ylab="k-mer distance")
image(dens, col=transp(myPal(300),.7), add=TRUE)
abline(lm(k21.dist ~ geomat))
dev.off()
k31_df$Same_host <- 'N'
k31_df$km <- 'N'
modern <- read.csv("../Fig1/Striga_GPS.csv", header=T)
for (i in 1:nrow(k31_df)) {
if (modern[modern$SampleID == k31_df$S1[i],3] ==
modern[modern$SampleID == k31_df$S2[i],3]) {
k31_df$Same_host[i] <- 'Y'
}
k31_df$km[i] <- geomat_mat[k31_df$S1[i],k31_df$S2[i]]
}
k31_df$km <- as.numeric(k31_df$km)
p <- ggplot(k31_df, aes(x = km, y = dist)) +
geom_point(alpha = 0.1) +
ylim(c(0.02, 0.030)) +
geom_smooth(method='lm', se = F, lty = 2) +
theme_classic() +
xlab("Geographic distance (km)") +
ylab("Genetic distance") +
facet_grid(.~Same_host)# these are the self comparisons
p
