clean_df$Country <- str_replace_all(clean_df$Country, 'Egypt?', 'Egypt')
clean_df$Country
?str_replace
clean_df$Country <- str_replace_all(clean_df$Country, '?', '')
clean_df$Country <- str_replace_all(clean_df$Country, '-', 'NA')
clean_df$Country
clean_df
clean_df <- immune_data %>%
select(Country, BKA, lysis, agglutination, TLC) %>% # columns you want
filter(BKA != "") # get rid of empty rows
## checking for NA's, typos, etc
unique(clean_df$Country)
clean_df$Country <- str_replace_all(clean_df$Country, '-', '0')
clean_df
clean_df <- immune_data %>%
select(Country, BKA, lysis, agglutination, TLC) %>% # columns you want
filter(BKA != "") # get rid of empty rows
## checking for NA's, typos, etc
unique(clean_df$Country)
clean_df$Country <- str_replace_all(clean_df$Country, '-', '0') # replace NA with 0
clean_df
clean_df <- immune_data %>%
select(Country, BKA, lysis, agglutination, TLC) %>% # columns you want
filter(BKA != "") # get rid of empty rows
?na.omit
clean_df %>% replace(is.na(.), 0)
clean_df %>% group_by(Country) %>% summarise()
?summarise
clean_df %>% group_by(Country) %>% summarise(BKA = count(BKA))
clean_df %>% group_by(Country) %>% summarise(BKA = n(BKA))
clean_df %>% group_by(Country) %>% summarise(BKA_tot = n(BKA))
unique(clean_df$Country)
## checking for NA's, typos, etc
unique(clean_df$Country)
clean_df$Country <- str_replace_all(clean_df$Country, '-', '0') # replace NA with 0
## checking for NA's, typos, etc
unique(clean_df$Country)
clean_df$Country <- str_replace_all(clean_df$Country, '-', 'NA') # replace NA with 0
clean_df$Country <- str_replace_all(clean_df$Country, '', 'NA') # replace NA with 0
clean_df$Country <- str_replace_all(clean_df$Country, "", 'NA') # replace NA with 0
clean_df <- immune_data %>%
select(Country, BKA, lysis, agglutination, TLC) %>% # columns you want
filter(BKA != "") %>%
filter(Country != "")# get rid of empty rows
o
clean_df <- immune_data %>%
select(Country, BKA, lysis, agglutination, TLC) %>% # columns you want
filter(BKA != "") %>%
filter(Country != "")# get rid of empty rows
## checking for NA's, typos, etc
unique(clean_df$Country)
clean_df$Country <- str_replace_all(clean_df$Country, '-', 'NA') # replace NA with 0
## checking for NA's, typos, etc
unique(clean_df$Country)
clean_df <- clean_df %>% replace(is.na(.), 0) # replace NA from rest of df
clean_df %>% group_by(Country) %>% summarise(BKA_tot = n(BKA))
str(clean_df)
summary(clean_df)
clean_df$Country <- as.factor(clean_df$Country)
summary(clean_df)
clean_df %>% group_by(Country) %>% summarise(BKA_tot = n(BKA))
clean_df %>% group_by(Country) %>% summarise(BKA_tot = n())
clean_df
clean_df %>% pivot_longer()
?pivot_longer
clean_df %>% pivot_longer(cols = 2:5)
clean_df %>%
pivot_longer(cols = 2:5) %>%
filter(value != 0)
df_long <- clean_df %>%
pivot_longer(cols = 2:5) %>%
filter(value != 0)
## ready to plot!
ggplot(df_long, aes(x = name, color = Country)) +
geom_bar()
df_long %>% group_by(Country) %>% summarise(agglutination = n())
df_long %>% filter(agglutination == 1) %>% group_by(Country) %>% summarise(agglutination = n())
df_long %>% filter(value == agglutination) %>% group_by(Country) %>% summarise(agglutination = n())
df_long %>% filter(value == "agglutination") %>% group_by(Country) %>% summarise(agglutination = n())
df_long %>% filter(value == "agglutination")
df_long %>% filter(name == "agglutination")
df_long %>% filter(name == "agglutination") %>% summarize(agg = n())
df_long %>% filter(name == "agglutination") %>% group_by(Country) %>% summarize(agg = n())
## ready to plot!
ggplot(df_long, aes(x = name, fill = Country)) +
geom_bar() +
theme_minimal() +
xlab("Test")
## ready to plot!
ggplot(df_long, aes(x = name, fill = Country)) +
geom_bar(position = 'dodge') +
theme_minimal() +
xlab("Test") #+
## ready to plot!
ggplot(df_long, aes(x = name, fill = Country)) +
geom_bar(position = 'dodge') +
theme_bw() +
xlab("Test") #+
## ready to plot!
ggplot(df_long, aes(x = name, fill = Country)) +
geom_bar(position = 'dodge') +
theme_minimal() +
xlab("Test") #+
## ready to plot!
ggplot(df_long, aes(x = name, fill = Country)) +
geom_bar(position = 'dodge') +
theme_classic() +
xlab("Test") #+
head(immune_data)
clean_df <- immune_data %>%
select(Order, Country, BKA, lysis, agglutination, TLC) %>% # columns you want
filter(BKA != "") %>%
filter(Country != "")# get rid of empty rows
head(clean_df)
unique(clean_df$Order)
clean_df <- immune_data %>%
select(Order, Country, BKA, lysis, agglutination, TLC) %>% # columns you want
filter(BKA != "") %>%
filter(Country != "")# get rid of empty rows
## checking for NA's, typos, etc
unique(clean_df$Country)
clean_df$Country <- str_replace_all(clean_df$Country, '-', 'NA') # replace NA with 0
clean_df <- clean_df %>% replace(is.na(.), 0) # replace NA from rest of df
clean_df$Country <- as.factor(clean_df$Country)
df_long <- clean_df %>%
pivot_longer(cols = 2:5) %>%
filter(value != 0)
clean_df
df_long <- clean_df %>%
pivot_longer(cols = 3:6) %>%
filter(value != 0)
## ready to plot!
ggplot(df_long, aes(x = name, fill = Country)) +
geom_bar(position = 'dodge') +
theme_classic() +
xlab("Test") #+
## ready to plot!
ggplot(df_long, aes(x = name, fill = Country)) +
geom_bar(position = 'dodge') +
theme_classic() +
xlab("Test") +
facet_grid(.~Order) #+
## ready to plot!
ggplot(df_long, aes(x = name, fill = Country)) +
geom_bar(position = 'dodge') +
theme_classic() +
xlab("Test") +
facet_grid(Order~.) #+
## ready to plot!
ggplot(df_long, aes(x = name, fill = Country)) +
geom_bar(position = 'dodge') +
theme_classic() +
xlab("Test") +
facet_grid(Order~Country) #+
## ready to plot!
ggplot(df_long, aes(x = name, fill = Country)) +
geom_bar(position = 'dodge') +
theme_classic() +
xlab("Test") +
facet_grid(Order~.) #+
## plotting G2F data
locations <- read.csv('~/Downloads/g2f_2017_field_metadata.csv', header = T)
locations <- read_csv('~/Downloads/g2f_2017_field_metadata.csv', header = T)
## plotting G2F data
library(tidy)
## plotting G2F data
library(tidyverse)
locations <- read_csv('~/Downloads/g2f_2017_field_metadata.csv', header = T)
locations <- read_csv('~/Downloads/g2f_2017_field_metadata.csv')
locations <- read.csv('~/Downloads/g2f_2017_field_metadata.csv')
locations <- read.csv('~/Downloads/g2f_2017_field_metadata2.csv')
locations <- read.csv('~/Downloads/g2f_2017_field_metadata2.csv', header = T)
head(locations)
locations %>% select(Experiment_Code, Treatment, Latitude_of_Field_Corner_.1..lower.left., Longitude_of_Field_Corner_.1..lower.left.)
locations %>% select(Experiment_Code, Treatment, Latitude_of_Field_Corner_.1..lower.left., Longitude_of_Field_Corner_.1..lower.left., Latitude_of_Field_Corner_.3..upper.right., Longitude_of_Field_Corner_.3..upper.right.)
locations <- locations %>% select(Experiment_Code,
Treatment,
Latitude_of_Field_Corner_.1..lower.left.,
Longitude_of_Field_Corner_.1..lower.left.)
head(locations)
library(tmap)
library(tmaptools)
library(usmap)
install.packages(usmap)
install.packages('usmap')
library(usmap)
?usmap
usmap::us_map(regions = "states"))
usmap::us_map(regions = "states")
library(tigris)
install.packages('tigris')
library(tigris)
download.file("http://www2.census.gov/geo/tiger/GENZ2015/shp/cb_2015_us_state_20m.zip", destfile = "states.zip")
unzip("states.zip")
us_geo<-read_shape("cb_2015_us_state_20m.shp", as.sf = TRUE, stringsAsFactors = FALSE)
us_geo <- st_read("cb_2015_us_state_20m.shp", as.sf = TRUE)
## plotting G2F data
library(tidyverse)
library(tmap)
library(tmaptools)
s
us_geo <- st_read("cb_2015_us_state_20m.shp", as.sf = TRUE)
library(sf)
us_geo <- st_read("cb_2015_us_state_20m.shp", as.sf = TRUE)
us_geo <- st_read("cb_2015_us_state_20m.shp")
plot(us_geo)
library(usmap)
plot_usmap(regions = "states") +
labs(title = "U.S. States",
subtitle = "This is a blank map of the United States.") +
theme(panel.background=element_blank())
colnames(locations)[3:4] <- c('Lat','Lon')
locations
library(raster)
SpatialPoint(cbind(locations$Lon, locations$Lat))
pts <- SpatialPoints(cbind(locations$Lon, locations$Lat))
pts <- SpatialPoints(cbind(locations$Lon, locations$Lat), na.omit = T)
locations %>% na.exclude()
locations <- locations %>% na.exclude()
pts <- SpatialPoints(cbind(locations$Lon, locations$Lat))
pts
CRS(us_map)
points(locations, add = T)
points(pts, add = T)
points(pts)
transformed_data <- usmap_transform(pts)
transformed_data <- usmap_transform(locations)
transformed_data <- usmap_transform(cbind.data.frame(locations$Lon, locations$Lat))
plot_usmap(regions = "states") +
labs(title = "U.S. States",
subtitle = "This is a blank map of the United States.") +
geom_point(data = transformed_data,
aes(x = Lon, y = Lat),
color = "red",
size = 3)
transformed_data
plot_usmap(regions = "states") +
labs(title = "U.S. States",
subtitle = "This is a blank map of the United States.") +
geom_point(data = transformed_data,
aes(x = locations.Lon.1, y = locations.Lat.1),
color = "red",
size = 3)
locations
plot_usmap(regions = "states") +
labs(title = "Maize Genomes2F",
subtitle = "Field locations 2017") +
geom_point(data = transformed_data,
aes(x = locations.Lon.1, y = locations.Lat.1),
color = "red",
size = 3)
plot_usmap(regions = "states") +
labs(title = "Maize Genomes2Fields",
subtitle = "Field Locations 2017") +
geom_point(data = transformed_data,
aes(x = locations.Lon.1, y = locations.Lat.1),
color = "red",
size = 3)
plot_usmap(regions = "states") +
labs(title = "Maize Genomes2Fields",
subtitle = "Field locations 2017") +
geom_point(data = transformed_data,
aes(x = locations.Lon.1, y = locations.Lat.1),
color = "red",
size = 3)
plot_usmap(regions = "states") +
labs(title = "Maize Genomes2Fields",
subtitle = "Field locations in 2017") +
geom_point(data = transformed_data,
aes(x = locations.Lon.1, y = locations.Lat.1),
color = "red",
size = 3)
nrow(read.csv('~/Downloads/g2f_2017_field_metadata2.csv', header = T))
plot_usmap(regions = "states") +
labs(title = "Maize Genomes2Fields",
subtitle = "32 field locations in 2017") +
geom_point(data = transformed_data,
aes(x = locations.Lon.1, y = locations.Lat.1),
color = "red",
size = 3)
plot_usmap(regions = "states") +
labs(title = "Maize Genomes2Fields",
subtitle = "32 field locations in 2017") +
geom_point(data = transformed_data,
aes(x = locations.Lon.1, y = locations.Lat.1),
color = "red",
size = 3)
plot_usmap(regions = "states") +
labs(title = "Maize Genomes2Fields",
subtitle = "32 field locations in 2017") +
geom_point(data = transformed_data,
aes(x = locations.Lon.1, y = locations.Lat.1),
color = "red",
size = 3)
sum(c(0.0016, 0.0118, 0.0373, 0.0379, 0.5085, 0.0994, 0.1605, 0.0949, 0.0482))
library(tidyverse)
library(jcolors)
# function to get diff in allele frequency
getAF <- function(pop1, pop2) {
df_k <- inner_join(pop1, pop2, by = c("chromo", "position"))
df_k$AF <- NULL
for (i in 1:nrow(df_k)) {
if (df_k$major.x[i] == df_k$major.y[i]){
df_k$AF[i] <- max(df_k$knownEM.x[i],df_k$knownEM.y[i]) - min(df_k$knownEM.x[i],df_k$knownEM.y[i])
} else {
df_k$AF[i] <- 1 - max(df_k$knownEM.x[i],df_k$knownEM.y[i]) - min(df_k$knownEM.x[i],df_k$knownEM.y[i])
}
}
return(df_k %>% select(c(chromo, position, AF)))
}
# read in files
km <- read.table('ang.kisii_mz.out.mafs', header = T) %>%
filter(nInd >= 9)
kf <- read.table('ang.kisii_fm.out.mafs', header = T) %>%
filter(nInd >= 9)
setwd('~/Documents/GitHub/StrigaWGS/FigANGSD/')
# read in files
km <- read.table('ang.kisii_mz.out.mafs', header = T) %>%
filter(nInd >= 9)
kf <- read.table('ang.kisii_fm.out.mafs', header = T) %>%
filter(nInd >= 9)
hm <- read.table('ang.homa_mz.out.mafs', header = T) %>%
filter(nInd >= 9)
hs <- read.table('ang.homa_sg.out.mafs', header = T) %>%
filter(nInd >= 9)
df_h <- getAF(hs, hm)
df_h$pop <- 'Homa Bay'
df_k <- getAF(kf, km)
df_k$pop <- 'Kisii'
df <- rbind.data.frame(df_k, df_h)
sl <- subset(df, chromo != "StHeBC4_h_c11261_g0_i1" &
chromo != "StHeBC4_p_c12587_g2_i1" &
chromo != "StHeBC4_u_c12903_g27039_i4")
# change labels for chromo for ShHTLs to annotations
shtl_names <- c(
"KR013131.1" = "ShHTL11",
"KR013130.1" = "ShHTL10",
"KR013129.1" = "ShHTL9",
"KR013128.1" = "ShHTL8",
"KR013127.1" = "ShHTL7",
"KR013126.1" = "ShHTL6",
"KR013125.1" = "ShHTL5",
"KR013124.1" = "ShHTL4",
"KR013123.1" = "ShHTL3",
"KR013122.1" = "ShHTL2",
"KR013121.1" = "ShHTL1"
)
p <- ggplot(sl, aes(x = position, y = AF, col = pop)) +
geom_point(size = 0.1, alpha = 0.5) +
facet_grid(chromo~., labeller = labeller(chromo = shtl_names)) +
ylim(c(0,1)) +
theme_minimal() +
theme(panel.grid.minor = element_blank(),
panel.grid.major.x = element_blank()) +
scale_colour_discrete(name = "Population") +
ylab("Allele Frequency Difference")
p
subset(sl, chromo == 'ShHTL6')
subset(sl, chromo == 'KR013126.1')
subset(sl, chromo == 'KR013126.1' & GST > 0.5)
subset(sl, GST > 0.5)
head(sl)
subset(sl, AF > 0.5)
subset(df, chromo == "KR013126.1") %>% filter(position == "457")
subset(km, chromo == "KR013126.1") %>% filter(position == "457")
subset(kh, chromo == "KR013126.1") %>% filter(position == "457")
subset(kf, chromo == "KR013126.1") %>% filter(position == "457")
subset(km, chromo == "KR013126.1") %>% filter(position == "457")
setwd('../Fig2/')
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
#setwd("/Users/ebellis/Documents/GitHub/StrigaWGS/")
library(tidyverse)
library(ape)
library(jcolors)
k31 <- read.table("k31.mash.out", header=F)
k31 <- k31 %>% select(1:3)
colnames(k31) <- c("S1","S2","dist")
meta <- read.csv('../Fig1/Striga_GPS.csv', header=T)
meta$Site <- as.factor(str_replace(meta$Site, "2","") %>% str_trim())
meta <- meta %>% filter(SampleID %in% unique(k31$S1))
# function to run PCoA and return clean df
runPCoA <- function(part, meta) {
# filter metadata
if(part == "A") {
meta_sub <- meta
} else if (part == "B") {
meta_sub <- filter(meta, Site != "Kisii") %>%
filter(Site != "Homa Bay")
meta_subkh <- filter(meta,
SampleID =="SH130"| SampleID =="SH134"|
SampleID =="SH138"| SampleID =="SH139"|
SampleID =="SH146"| SampleID =="SH124"|
SampleID =="SH117"| SampleID =="SH113"|
SampleID =="SH111"|SampleID =="SH104")
meta_sub <- rbind(meta_sub, meta_subkh)
} else if (part == "C") {
meta_sub <- filter(meta, Site == "Kisii")
} else if (part == "D") {
meta_sub <- filter(meta, Site == "Homa Bay")
}
# create distance matrix
k31_flt <- k31 %>% filter(S1 %in% meta_sub$SampleID) %>%
filter(S2 %in% meta_sub$SampleID)
k31_flt <- as.matrix(k31_flt %>%
pivot_wider(names_from = S2,
values_from = dist) %>%
column_to_rownames(var="S1"))
k31.dist <- as.dist(k31_flt)
# run PCoA
k31.pcoa <- ape::pcoa(k31.dist, correction="none", rn=NULL)
# create df of results
df <- cbind.data.frame("SampleID"=rownames(k31.pcoa$vectors),
"Axis1"=k31.pcoa$vectors[,1],
"Axis2"=k31.pcoa$vectors[,2])
# add metadata
#meta <- read.csv('Striga_GPS.csv', header=T)
#meta$Site <- as.factor(str_replace(meta$Site, "2","") %>% str_trim())
tmp <- meta %>% select(SampleID, Site, Host)
df <- inner_join(tmp, df)
return(df)
}
# loop through each figure part to create final df
FigParts = c("A","B","C","D")
for (i in 1:4){
df <- runPCoA(FigParts[i], meta)
df$part <- FigParts[i]
if(i > 1){
df <- rbind.data.frame(df_old, df)
df_old <- df
} else {
df_old <- df
}
}
df
p <- ggplot(df, aes(x=Axis1, y=Axis2, col=Site, pch=Host)) +
geom_point(alpha = 0.6, size = 2.5) +
theme_classic() +
scale_colour_manual(values=paste0(jcolors(palette="pal5"))) +
facet_wrap(.~part)
p
p <- ggplot(df, aes(x=Axis1, y=Axis2, col=Site, fill = Site, pch=Host)) +
geom_point(alpha = 0.6, size = 2.5) +
theme_classic() +
scale_colour_manual(values=paste0(jcolors(palette="pal5"))) +
facet_wrap(.~part)
p
p <- ggplot(df, aes(x=Axis1, y=Axis2, col=Site, fill = Site, pch=Host)) +
geom_point(alpha = 0.6, size = 2.5) +
theme_classic() +
scale_colour_manual(values=paste0(jcolors(palette="pal5"))) +
facet_wrap(.~part) +
scale_fill_manual(values=paste0(jcolors(palette="pal5")))
p
?scale_shape_discrete
p
scale_fill_manual(values=paste0(jcolors(palette="pal5")))
p
scale_fill_manual(values=paste0(jcolors(palette="pal3")))
p <- ggplot(df, aes(x=Axis1, y=Axis2, col=Site, fill = Site, pch=Host)) +
geom_point(alpha = 0.6, size = 2.5) +
theme_classic() +
scale_colour_manual(values=paste0(jcolors(palette="pal5"))) +
facet_wrap(.~part) +
scale_shape_manual(values = c(16, 2, 15, 3)) +
scale_fill_manual(values=paste0(jcolors(palette="pal3")))
p
unique(df$Host)
p <- ggplot(df, aes(x=Axis1, y=Axis2, col=Site, fill = Site, pch=Host)) +
geom_point(alpha = 0.6, size = 2.5) +
theme_classic() +
scale_colour_manual(values=paste0(jcolors(palette="pal5"))) +
facet_wrap(.~part) +
scale_pch_manual(values = c(16, 2, 15, 3)) +
scale_fill_manual(values=paste0(jcolors(palette="pal3")))
p <- ggplot(df, aes(x=Axis1, y=Axis2, col=Site, fill = Site, shape=Host)) +
geom_point(alpha = 0.6, size = 2.5) +
theme_classic() +
scale_colour_manual(values=paste0(jcolors(palette="pal5"))) +
facet_wrap(.~part) +
scale_shape_manual(values = c(16, 2, 15, 3)) +
scale_fill_manual(values=paste0(jcolors(palette="pal3")))
p
p <- ggplot(df, aes(x=Axis1, y=Axis2, col=Site, fill=Site, shape=Host)) +
geom_point(alpha = 0.6, size = 2.5) +
theme_classic() +
scale_colour_manual(values=paste0(jcolors(palette="pal5"))) +
facet_wrap(.~part) +
scale_shape_manual(values = c(16, 2, 15, 3)) +
scale_fill_manual(values=paste0(jcolors(palette="pal3")))
p
p <- ggplot(df, aes(x=Axis1, y=Axis2, col=Site, fill=Site, shape=Host)) +
geom_point(alpha = 0.6, size = 2.5) +
theme_classic() +
scale_colour_manual(values=paste0(jcolors(palette="pal5"))) +
facet_wrap(.~part) +
scale_shape_manual(values = c(16, 2, 15, 3))
p
k32.dist
k31.dist
runPCoA(A,meta)
runPCoA("A",meta)
runPCoA("B",meta)
p <- ggplot(df, aes(x=Axis1, y=Axis2, col=Site, fill=Site, shape=Host)) +
geom_point(alpha = 0.6, size = 2.5) +
theme_classic() +
scale_colour_manual(values=paste0(jcolors(palette="pal5"))) +
facet_wrap(.~part) +
scale_shape_manual(values = c(16, 2, 15, 3))
pdf(file="Fig2.pdf",width=5,height=5)
p
dev.off()
