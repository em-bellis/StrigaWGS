getwd
getwd()
nrow(homabay_kmer_list)
homabay_kmer_list
write.table(kisii_kmer_list, "kisii_kmers_GST5.txt", row.names = F, col.names = F, sep = "\t", quote = F)
write.table(homabay_kmer_list, "homabay_kmers_GST5.txt", row.names = F, col.names = F, sep = "\t", quote = F)
len(homabay_kmer_list)
length(homabay_kmer_list)
### extract kmers with GST >0.5 for assembly
kisii_kmer_list <- subset(gst_all, pop == "kisii" & GST >= 0.5)$kmer
### extract kmers with GST >0.5 for assembly
kisii_kmer_list <- subset(gst_all, pop == "kisii" & GST >= 0.5)$kmer
homabay_kmer_list <- subset(gst_all, pop == "homabay" & GST >= 0.5)$kmer
write.table(kisii_kmer_list, "kisii_kmers_GST5.txt", row.names = F, col.names = F, sep = "\t", quote = F)
write.table(homabay_kmer_list, "homabay_kmers_GST5.txt", row.names = F, col.names = F, sep = "\t", quote = F)
length(homabay_kmer_list)
length(kisii_kmer_list)
### graph Gst
p <- ggplot(gst_all, aes(x = GST, col = pop)) +
geom_density() +
theme_classic()
pdf("kmerdist.pdf", width = 3, height = 3)
p
dev.off()
nrow(kisii_kmer_list)
### extract kmers with GST >0.5 for assembly
kisii_kmer_list <- subset(gst_all, pop == "kisii" & GST >= 0.5)$kmer
library(tidyverse)
pop = c("kisii","homabay")
### load and tidy input data
for (i in 1:2) {
gst <- read.table(paste0('~/Desktop/Projects/StigaxSorghum/KenyaWGS/alan/',pop[i],'/GST_Output.txt'))
colnames(gst) <- c('kmer','HS','HT','DST','GST')
gst$pop <- paste0(pop[i])
if (i == 1) {
gst_all <- gst
} else {
gst_all <- rbind.data.frame(gst_all, gst)
}
}
### graph Gst
p <- ggplot(gst_all, aes(x = GST, col = pop)) +
geom_density() +
theme_classic()
nrow(subset(gst_all, GST >= 0.5 & pop == "kisii"))/nrow(subset(gst_all, pop == "kisii")) # 4% of kisii kmers
nrow(subset(gst_all, GST >= 0.5 & pop == "homabay"))/nrow(subset(gst_all, pop == "homabay")) # 0.6% of homa bay kmers
### extract kmers with GST >0.5 for assembly
kisii_kmer_list <- subset(gst_all, pop == "kisii" & GST >= 0.5)$kmer
homabay_kmer_list <- subset(gst_all, pop == "homabay" & GST >= 0.5)$kmer
write.table(kisii_kmer_list, "kisii_kmers_GST5.txt", row.names = F, col.names = F, sep = "\t", quote = F)
write.table(homabay_kmer_list, "homabay_kmers_GST5.txt", row.names = F, col.names = F, sep = "\t", quote = F)
pdf("kmerdist.pdf", width = 3, height = 3)
p
dev.off()
### graph Gst
p <- ggplot(gst_all, aes(x = GST, col = pop)) +
geom_density() +
theme_classic() +
xlab(paste(italic(GST)))
### graph Gst
p <- ggplot(gst_all, aes(x = GST, col = pop)) +
geom_density() +
theme_classic() +
xlab(expression(paste(italic(GST))))
p
### graph Gst
p <- ggplot(gst_all, aes(x = GST, col = pop)) +
geom_density() +
theme_classic() +
xlab(expression(paste(italic(G_ST))))
p
### graph Gst
p <- ggplot(gst_all, aes(x = GST, col = pop)) +
geom_density() +
theme_classic() +
xlab(expression(italic(G_ST)))
p
help("plotmath")
### graph Gst
p <- ggplot(gst_all, aes(x = GST, col = pop)) +
geom_density() +
theme_classic() +
xlab(expression(italic(G[ST])))
p
### graph Gst
p <- ggplot(gst_all, aes(x = GST, col = pop)) +
geom_density() +
theme_classic() +
xlab(expression(italic(G[ST]))) +
theme(legend.title = "Population")
p
### graph Gst
p <- ggplot(gst_all, aes(x = GST, col = pop)) +
geom_density() +
theme_classic() +
xlab(expression(italic(G[ST]))) +
labs(col = "Population")
p
### graph Gst
p <- ggplot(gst_all, aes(x = GST, col = pop)) +
geom_density() +
theme_classic() +
xlab(expression(italic(G[ST]))) +
scale_colour_discrete(name = "Population", labels = c("Homa Bay", "Kisii"))
p
nrow(subset(gst_all, pop == "homabay"))
nrow(subset(gst_all, pop == "kisii"))
nrow(subset(gst_all, GST >= 0.5 & pop == "kisii"))/nrow(subset(gst_all, pop == "kisii"))
nrow(subset(gst_all, GST >= 0.5 & pop == "homabay"))/nrow(subset(gst_all, pop == "homabay"))
## graphing frequency of different immune metrics
immune_data <- read.csv('~/Desktop/Mega_EF.csv', header = T)
head(immune_data)
## filter
library(tidyverse)
immune_data %>% select(Country, BKA, lysis, agglutination, TLC)
clean_df <- immune_data %>% select(Country, BKA, lysis, agglutination, TLC)
clean_df
unique(clean_df$Country)
str_replace_all(clean_df$Country, "Egypt?", "Egypt")
clean_df <- immune_data %>%
select(Country, BKA, lysis, agglutination, TLC) %>% # columns you want
filter(Country != "")
clean_df <- immune_data %>%
select(Country, BKA, lysis, agglutination, TLC) #%>% # columns you want
clean_df
summary(clean_df)
filter(BKA != "")
nrow(clean_df)
clean_df <- immune_data %>%
select(Country, BKA, lysis, agglutination, TLC) %>% # columns you want
filter(BKA != "")
nrow(clean_df)
## checking for NA's, typos, etc
unique(clean_df$Country)
r
clean_df$Country <- str_replace_all(clean_df$Country, "Egypt?", "Egypt")
## checking for NA's, typos, etc
unique(clean_df$Country)
clean_df$Country <- str_replace_all(clean_df$Country, "Egypt?", "Egypt")
## checking for NA's, typos, etc
unique(clean_df$Country)
clean_df$Country <- str_replace_all(clean_df$Country, "Egypt\?", "Egypt")
clean_df$Country <- str_replace_all(clean_df$Country, 'Egypt?', 'Egypt')
clean_df$Country
?str_replace
clean_df$Country <- str_replace_all(clean_df$Country, '?', '')
clean_df$Country <- str_replace_all(clean_df$Country, '-', 'NA')
clean_df$Country
clean_df
clean_df <- immune_data %>%
select(Country, BKA, lysis, agglutination, TLC) %>% # columns you want
filter(BKA != "") # get rid of empty rows
## checking for NA's, typos, etc
unique(clean_df$Country)
clean_df$Country <- str_replace_all(clean_df$Country, '-', '0')
clean_df
clean_df <- immune_data %>%
select(Country, BKA, lysis, agglutination, TLC) %>% # columns you want
filter(BKA != "") # get rid of empty rows
## checking for NA's, typos, etc
unique(clean_df$Country)
clean_df$Country <- str_replace_all(clean_df$Country, '-', '0') # replace NA with 0
clean_df
clean_df <- immune_data %>%
select(Country, BKA, lysis, agglutination, TLC) %>% # columns you want
filter(BKA != "") # get rid of empty rows
?na.omit
clean_df %>% replace(is.na(.), 0)
clean_df %>% group_by(Country) %>% summarise()
?summarise
clean_df %>% group_by(Country) %>% summarise(BKA = count(BKA))
clean_df %>% group_by(Country) %>% summarise(BKA = n(BKA))
clean_df %>% group_by(Country) %>% summarise(BKA_tot = n(BKA))
unique(clean_df$Country)
## checking for NA's, typos, etc
unique(clean_df$Country)
clean_df$Country <- str_replace_all(clean_df$Country, '-', '0') # replace NA with 0
## checking for NA's, typos, etc
unique(clean_df$Country)
clean_df$Country <- str_replace_all(clean_df$Country, '-', 'NA') # replace NA with 0
clean_df$Country <- str_replace_all(clean_df$Country, '', 'NA') # replace NA with 0
clean_df$Country <- str_replace_all(clean_df$Country, "", 'NA') # replace NA with 0
clean_df <- immune_data %>%
select(Country, BKA, lysis, agglutination, TLC) %>% # columns you want
filter(BKA != "") %>%
filter(Country != "")# get rid of empty rows
o
clean_df <- immune_data %>%
select(Country, BKA, lysis, agglutination, TLC) %>% # columns you want
filter(BKA != "") %>%
filter(Country != "")# get rid of empty rows
## checking for NA's, typos, etc
unique(clean_df$Country)
clean_df$Country <- str_replace_all(clean_df$Country, '-', 'NA') # replace NA with 0
## checking for NA's, typos, etc
unique(clean_df$Country)
clean_df <- clean_df %>% replace(is.na(.), 0) # replace NA from rest of df
clean_df %>% group_by(Country) %>% summarise(BKA_tot = n(BKA))
str(clean_df)
summary(clean_df)
clean_df$Country <- as.factor(clean_df$Country)
summary(clean_df)
clean_df %>% group_by(Country) %>% summarise(BKA_tot = n(BKA))
clean_df %>% group_by(Country) %>% summarise(BKA_tot = n())
clean_df
clean_df %>% pivot_longer()
?pivot_longer
clean_df %>% pivot_longer(cols = 2:5)
clean_df %>%
pivot_longer(cols = 2:5) %>%
filter(value != 0)
df_long <- clean_df %>%
pivot_longer(cols = 2:5) %>%
filter(value != 0)
## ready to plot!
ggplot(df_long, aes(x = name, color = Country)) +
geom_bar()
df_long %>% group_by(Country) %>% summarise(agglutination = n())
df_long %>% filter(agglutination == 1) %>% group_by(Country) %>% summarise(agglutination = n())
df_long %>% filter(value == agglutination) %>% group_by(Country) %>% summarise(agglutination = n())
df_long %>% filter(value == "agglutination") %>% group_by(Country) %>% summarise(agglutination = n())
df_long %>% filter(value == "agglutination")
df_long %>% filter(name == "agglutination")
df_long %>% filter(name == "agglutination") %>% summarize(agg = n())
df_long %>% filter(name == "agglutination") %>% group_by(Country) %>% summarize(agg = n())
## ready to plot!
ggplot(df_long, aes(x = name, fill = Country)) +
geom_bar() +
theme_minimal() +
xlab("Test")
## ready to plot!
ggplot(df_long, aes(x = name, fill = Country)) +
geom_bar(position = 'dodge') +
theme_minimal() +
xlab("Test") #+
## ready to plot!
ggplot(df_long, aes(x = name, fill = Country)) +
geom_bar(position = 'dodge') +
theme_bw() +
xlab("Test") #+
## ready to plot!
ggplot(df_long, aes(x = name, fill = Country)) +
geom_bar(position = 'dodge') +
theme_minimal() +
xlab("Test") #+
## ready to plot!
ggplot(df_long, aes(x = name, fill = Country)) +
geom_bar(position = 'dodge') +
theme_classic() +
xlab("Test") #+
head(immune_data)
clean_df <- immune_data %>%
select(Order, Country, BKA, lysis, agglutination, TLC) %>% # columns you want
filter(BKA != "") %>%
filter(Country != "")# get rid of empty rows
head(clean_df)
unique(clean_df$Order)
clean_df <- immune_data %>%
select(Order, Country, BKA, lysis, agglutination, TLC) %>% # columns you want
filter(BKA != "") %>%
filter(Country != "")# get rid of empty rows
## checking for NA's, typos, etc
unique(clean_df$Country)
clean_df$Country <- str_replace_all(clean_df$Country, '-', 'NA') # replace NA with 0
clean_df <- clean_df %>% replace(is.na(.), 0) # replace NA from rest of df
clean_df$Country <- as.factor(clean_df$Country)
df_long <- clean_df %>%
pivot_longer(cols = 2:5) %>%
filter(value != 0)
clean_df
df_long <- clean_df %>%
pivot_longer(cols = 3:6) %>%
filter(value != 0)
## ready to plot!
ggplot(df_long, aes(x = name, fill = Country)) +
geom_bar(position = 'dodge') +
theme_classic() +
xlab("Test") #+
## ready to plot!
ggplot(df_long, aes(x = name, fill = Country)) +
geom_bar(position = 'dodge') +
theme_classic() +
xlab("Test") +
facet_grid(.~Order) #+
## ready to plot!
ggplot(df_long, aes(x = name, fill = Country)) +
geom_bar(position = 'dodge') +
theme_classic() +
xlab("Test") +
facet_grid(Order~.) #+
## ready to plot!
ggplot(df_long, aes(x = name, fill = Country)) +
geom_bar(position = 'dodge') +
theme_classic() +
xlab("Test") +
facet_grid(Order~Country) #+
## ready to plot!
ggplot(df_long, aes(x = name, fill = Country)) +
geom_bar(position = 'dodge') +
theme_classic() +
xlab("Test") +
facet_grid(Order~.) #+
## plotting G2F data
locations <- read.csv('~/Downloads/g2f_2017_field_metadata.csv', header = T)
locations <- read_csv('~/Downloads/g2f_2017_field_metadata.csv', header = T)
## plotting G2F data
library(tidy)
## plotting G2F data
library(tidyverse)
locations <- read_csv('~/Downloads/g2f_2017_field_metadata.csv', header = T)
locations <- read_csv('~/Downloads/g2f_2017_field_metadata.csv')
locations <- read.csv('~/Downloads/g2f_2017_field_metadata.csv')
locations <- read.csv('~/Downloads/g2f_2017_field_metadata2.csv')
locations <- read.csv('~/Downloads/g2f_2017_field_metadata2.csv', header = T)
head(locations)
locations %>% select(Experiment_Code, Treatment, Latitude_of_Field_Corner_.1..lower.left., Longitude_of_Field_Corner_.1..lower.left.)
locations %>% select(Experiment_Code, Treatment, Latitude_of_Field_Corner_.1..lower.left., Longitude_of_Field_Corner_.1..lower.left., Latitude_of_Field_Corner_.3..upper.right., Longitude_of_Field_Corner_.3..upper.right.)
locations <- locations %>% select(Experiment_Code,
Treatment,
Latitude_of_Field_Corner_.1..lower.left.,
Longitude_of_Field_Corner_.1..lower.left.)
head(locations)
library(tmap)
library(tmaptools)
library(usmap)
install.packages(usmap)
install.packages('usmap')
library(usmap)
?usmap
usmap::us_map(regions = "states"))
usmap::us_map(regions = "states")
library(tigris)
install.packages('tigris')
library(tigris)
download.file("http://www2.census.gov/geo/tiger/GENZ2015/shp/cb_2015_us_state_20m.zip", destfile = "states.zip")
unzip("states.zip")
us_geo<-read_shape("cb_2015_us_state_20m.shp", as.sf = TRUE, stringsAsFactors = FALSE)
us_geo <- st_read("cb_2015_us_state_20m.shp", as.sf = TRUE)
## plotting G2F data
library(tidyverse)
library(tmap)
library(tmaptools)
s
us_geo <- st_read("cb_2015_us_state_20m.shp", as.sf = TRUE)
library(sf)
us_geo <- st_read("cb_2015_us_state_20m.shp", as.sf = TRUE)
us_geo <- st_read("cb_2015_us_state_20m.shp")
plot(us_geo)
library(usmap)
plot_usmap(regions = "states") +
labs(title = "U.S. States",
subtitle = "This is a blank map of the United States.") +
theme(panel.background=element_blank())
colnames(locations)[3:4] <- c('Lat','Lon')
locations
library(raster)
SpatialPoint(cbind(locations$Lon, locations$Lat))
pts <- SpatialPoints(cbind(locations$Lon, locations$Lat))
pts <- SpatialPoints(cbind(locations$Lon, locations$Lat), na.omit = T)
locations %>% na.exclude()
locations <- locations %>% na.exclude()
pts <- SpatialPoints(cbind(locations$Lon, locations$Lat))
pts
CRS(us_map)
points(locations, add = T)
points(pts, add = T)
points(pts)
transformed_data <- usmap_transform(pts)
transformed_data <- usmap_transform(locations)
transformed_data <- usmap_transform(cbind.data.frame(locations$Lon, locations$Lat))
plot_usmap(regions = "states") +
labs(title = "U.S. States",
subtitle = "This is a blank map of the United States.") +
geom_point(data = transformed_data,
aes(x = Lon, y = Lat),
color = "red",
size = 3)
transformed_data
plot_usmap(regions = "states") +
labs(title = "U.S. States",
subtitle = "This is a blank map of the United States.") +
geom_point(data = transformed_data,
aes(x = locations.Lon.1, y = locations.Lat.1),
color = "red",
size = 3)
locations
plot_usmap(regions = "states") +
labs(title = "Maize Genomes2F",
subtitle = "Field locations 2017") +
geom_point(data = transformed_data,
aes(x = locations.Lon.1, y = locations.Lat.1),
color = "red",
size = 3)
plot_usmap(regions = "states") +
labs(title = "Maize Genomes2Fields",
subtitle = "Field Locations 2017") +
geom_point(data = transformed_data,
aes(x = locations.Lon.1, y = locations.Lat.1),
color = "red",
size = 3)
plot_usmap(regions = "states") +
labs(title = "Maize Genomes2Fields",
subtitle = "Field locations 2017") +
geom_point(data = transformed_data,
aes(x = locations.Lon.1, y = locations.Lat.1),
color = "red",
size = 3)
plot_usmap(regions = "states") +
labs(title = "Maize Genomes2Fields",
subtitle = "Field locations in 2017") +
geom_point(data = transformed_data,
aes(x = locations.Lon.1, y = locations.Lat.1),
color = "red",
size = 3)
nrow(read.csv('~/Downloads/g2f_2017_field_metadata2.csv', header = T))
plot_usmap(regions = "states") +
labs(title = "Maize Genomes2Fields",
subtitle = "32 field locations in 2017") +
geom_point(data = transformed_data,
aes(x = locations.Lon.1, y = locations.Lat.1),
color = "red",
size = 3)
plot_usmap(regions = "states") +
labs(title = "Maize Genomes2Fields",
subtitle = "32 field locations in 2017") +
geom_point(data = transformed_data,
aes(x = locations.Lon.1, y = locations.Lat.1),
color = "red",
size = 3)
plot_usmap(regions = "states") +
labs(title = "Maize Genomes2Fields",
subtitle = "32 field locations in 2017") +
geom_point(data = transformed_data,
aes(x = locations.Lon.1, y = locations.Lat.1),
color = "red",
size = 3)
library(adegenet)
library(tidyverse)
k31 <- read.table("k31.mash.out", header=F)
k31 <- k31 %>% dplyr::select(1:3)
colnames(k31) <- c("S1","S2","dist")
k31$S1 <- as.factor(k31$S1)
k31$S2 <- as.factor(k31$S2)
k31_df <- k31
k31 <- as.matrix(k31 %>%
pivot_wider(names_from = S2,
values_from = dist) %>%
column_to_rownames(var="S1"))
k31.dist <- as.dist(k31)
getwd()
setwd('~/Documents/GitHub/StrigaWGS/Fig2/')
k31 <- read.table("k31.mash.out", header=F)
k31 <- k31 %>% dplyr::select(1:3)
colnames(k31) <- c("S1","S2","dist")
k31$S1 <- as.factor(k31$S1)
k31$S2 <- as.factor(k31$S2)
k31_df <- k31
k31 <- as.matrix(k31 %>%
pivot_wider(names_from = S2,
values_from = dist) %>%
column_to_rownames(var="S1"))
k31.dist <- as.dist(k31)
library(geodist)
modern <- read.csv("../Fig1/Striga_GPS.csv", header=T)
modern <- modern %>% dplyr::select(SampleID, Lat, Lon)
modern <- modern %>% filter(SampleID %in% unique(rownames(k31)))
geomat <- geodist(modern, sequential = F, measure = "geodesic")/1000
rownames(geomat) <- modern$SampleID
colnames(geomat) <- modern$SampleID
geomat_mat <- geomat
geomat <- as.dist(geomat)
ibd <- mantel.randtest(k31.dist,geomat)
plot(ibd) # significant IBD, p=0.003
library(MASS)
dens <- kde2d(geomat,k31.dist, n=300)
myPal <- colorRampPalette(c("white","blue","gold", "orange", "red"))
pdf("Fig1D_IBD.pdf", width = 3, height=3)
plot(geomat,k31.dist, pch=20,cex=.5, xlab="Distance (km)", alpha = 0.5, ylab="k-mer distance")
image(dens, col=transp(myPal(300),.7), add=TRUE)
abline(lm(k31.dist ~ geomat))
dev.off()
plot(geomat,k31.dist, pch=20,cex=.5, xlab="Distance (km)", alpha = 0.5, ylab="k-mer distance")
k31_df$Same_host <- 'N'
k31_df$km <- 'N'
modern <- read.csv("../Fig1/Striga_GPS.csv", header=T)
for (i in 1:nrow(k31_df)) {
if (modern[modern$SampleID == k31_df$S1[i],3] ==
modern[modern$SampleID == k31_df$S2[i],3]) {
k31_df$Same_host[i] <- 'Y'
}
k31_df$km[i] <- geomat_mat[k31_df$S1[i],k31_df$S2[i]]
}
k31_df$km <- as.numeric(k31_df$km)
p <- ggplot(k31_df, aes(x = km, y = dist)) +
geom_point(alpha = 0.1) +
ylim(c(0.02, 0.030)) +
geom_smooth(method='lm', se = F, lty = 2) +
theme_classic() +
xlab("Geographic distance (km)") +
ylab("Genetic distance") +
facet_grid(.~Same_host)# these are the self comparisons
p
p <- ggplot(k31_df, aes(x = km, y = dist)) +
geom_point(alpha = 0.1) +
ylim(c(0.02, 0.030)) +
geom_smooth(method='lm', se = F, lty = 2) +
theme_classic() +
xlab("Geographic distance (km)") +
ylab("Genetic distance") +
facet_grid(Same_host ~ .)# these are the self comparisons
p
9/12
